buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.0'
        classpath 'com.novoda:gradle-android-command-plugin:1.3.0'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'android-command'

archivesBaseName = 'Osiris-App-'+version
boolean releaseAvailable=false

repositories {
    jcenter()
}

android {
//    use the newest SDK automatically if the given one is not available
    compileSdkVersion highestSdkAvailable(21)
    //Use the lastest BuildTool Version available, default to the given value on error
    buildToolsVersion latestBuildToolsAvailable("21.1.2")

    lintOptions {
        abortOnError false
    }

    signingConfigs {

        defaultConfig {
            applicationId "at.pria.osiris.osiris" //This should never change
            minSdkVersion 10
            targetSdkVersion 21
            versionCode 1
            versionName version
        }

        debug {
            storeFile = file("osirisDebugKeyStore.jks")
            storePassword = 'mydebug'
            keyAlias = 'debug'
            keyPassword = 'mydebug'
        }

        release {
            File propFile = file("${projectDir}${File.separator}signing.properties")

            if (propFile.exists()) {
                println 'RootDir signing.properties exists'
                logger.info 'RootDir signing.properties exists'
            } else {
                logger.info "signing.properties does not exist in ${projectDir.toString()}${File.separator}signing.properties"
                println "signing.properties does not exist in ${projectDir.toString()}${File.separator}signing.properties"
            }
            if (propFile.exists()) {
                def Properties props = new Properties()
                props.load(new FileInputStream(propFile))
                if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                        props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
                    storeFile = file(props['STORE_FILE'])
                    storePassword = props['STORE_PASSWORD']
                    keyAlias = props['KEY_ALIAS']
                    keyPassword = props['KEY_PASSWORD']
                    releaseAvailable=true
                } else {
                    println 'signing.properties a property is not set'
                    logger.info 'signing.properties a property is not set'
                }
            }
        }
    }

    buildTypes {
        release {
            if (releaseAvailable) signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

//
// get the installed SDK and build tools version
// source: http://www.egeek.me/2013/12/07/gradle-auto-detect-android-sdk-and-build-tools-versions/
// modified by Ari Ayvazyan
import org.codehaus.groovy.runtime.StackTraceUtils

String androidSDKDir() {
    def sdkDir = android.getSdkDirectory().toString()
    return sdkDir
}

int[] sdksAvailable() {
    def sdks = new ByteArrayOutputStream()
    def androidSdkDir = androidSDKDir()
    exec {
        workingDir androidSdkDir + "/tools"
        if(isWindows()) {
            commandLine 'cmd', '/c','android', 'list'
        } else {
            commandLine './android', 'list'
        }
        standardOutput = sdks
    }
    sdks = sdks
    // get the output
            .toString()
    // split to strings
            .split('\n')
    // leave only strings with API levels
            .findAll { it ==~ /\s*API level:\s*(\d+).*/ }
    // extract the API levels
            .collect { (it =~ /\s*API level:\s*(\d+).*/)[0][1].toInteger() }
    // sort from highest to lowest
            .sort( { a, b -> b <=> a } )
    sdks
}

int highestSdkAvailable(int preferredSdk) {
    try {
        def sdks = sdksAvailable()
        def highestSdk = sdks[0]
        if (highestSdk == null) {
            println "No installed SDKs found. Using default SDK " + preferredSdk
            return preferredSdk
        }else if(sdks.contains(preferredSdk)) {
            println "Preferred SDK found, using: " + preferredSdk
            return preferredSdk
        }else{
            println "Using latest found SDK " + highestSdk
            return highestSdk
        }
    } catch (any) {
        println "Exception while determining highest SDK. Using default SDK " +
                preferredSdk
        StackTraceUtils.sanitize(any).printStackTrace()
        preferredSdk
    }
}

String[] buildToolsAvailable() {
    println "sdk dir: " + androidSDKDir()
    def buildToolsDir = new File(androidSDKDir(), "build-tools")
    buildToolsDir.list([accept:{d, f-> !f.contains("android") }] as FilenameFilter).sort { a, b -> b <=> a }
}

String latestBuildToolsAvailable(String defaultBuildTools) {
    try {
        def buildToolsVersions = buildToolsAvailable()
        def latestBuildTools = buildToolsVersions[0]
        if (latestBuildTools != null) {
            println "Using latest found build tools " + latestBuildTools
            latestBuildTools
        } else {
            println "No installed build tools found. Using default build tools " +
                    defaultBuildTools
            defaultBuildTools
        }
    } catch (any) {
        println "Exception while determining latest build tools. Using default build tools " +
                defaultBuildTools
        StackTraceUtils.sanitize(any).printStackTrace()
        defaultBuildTools
    }
}

import org.apache.tools.ant.taskdefs.condition.Os
boolean isWindows() {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return true
    }
    return false
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.j256.ormlite:ormlite-android:4.48'
    compile 'com.j256.ormlite:ormlite-core:4.48'
    compile group: 'log4j', name: 'log4j', version:'1.2.17'
    androidTestCompile group: 'junit', name: 'junit', version: '4.12'
    //compile group: 'org.slf4j', name: 'slf4j-simple', version:'1.7.7'
    compile 'com.github.shell-software:fab:1.0.5'
//    compile 'com.google.zxing:core:3.2.0'
    compile project(':api')
    compile project(':qrlibrary')
}