buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.1'
        classpath 'com.novoda:gradle-android-command-plugin:1.3.0'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'android-command'
apply from: 'https://github.com/aayvazyan-tgm/autodetect_android_sdk_and_buildTools/releases/download/1.2/sdktools.gradle'

archivesBaseName = 'Osiris-App-'+version
boolean releaseAvailable=false

repositories {
    jcenter()
}

android {
    //use the newest SDK automatically if the given one is not available
    compileSdkVersion project.getSDKIfPossible(21)
    //Use the lastest BuildTool Version available, default to the given value on error
    buildToolsVersion project.getHighestAvailableTools("21.1.2")

    lintOptions {
        abortOnError false
    }

    sourceSets {
        main {
//            Manifest.srcFile 'AndroidManifest.xml'
//            java.srcDirs = ['src']
//            aidl.srcDirs = ['src']
//            renderscript.srcDirs = ['src']
//            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        instrumentTest.setRoot('tests')
    }

    signingConfigs {

        defaultConfig {
            applicationId "at.pria.osiris.osiris" //This should never change
            minSdkVersion 10
            targetSdkVersion 21
            versionCode 1
            versionName version
        }

        debug {
            storeFile = file("osirisDebugKeyStore.jks")
            storePassword = 'mydebug'
            keyAlias = 'debug'
            keyPassword = 'mydebug'
        }

        release {
            File propFile = file("${projectDir}${File.separator}signing.properties")

            if (propFile.exists()) {
                println 'RootDir signing.properties exists'
                logger.info 'RootDir signing.properties exists'
            } else {
                logger.info "signing.properties does not exist in ${projectDir.toString()}${File.separator}signing.properties"
                println "signing.properties does not exist in ${projectDir.toString()}${File.separator}signing.properties"
            }
            if (propFile.exists()) {
                def Properties props = new Properties()
                props.load(new FileInputStream(propFile))
                if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                        props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
                    storeFile = file(props['STORE_FILE'])
                    storePassword = props['STORE_PASSWORD']
                    keyAlias = props['KEY_ALIAS']
                    keyPassword = props['KEY_PASSWORD']
                    releaseAvailable=true
                } else {
                    println 'signing.properties a property is not set'
                    logger.info 'signing.properties a property is not set'
                }
            }
        }
    }

    buildTypes {
        release {
            if (releaseAvailable) signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.j256.ormlite:ormlite-android:4.48'
    compile 'com.j256.ormlite:ormlite-core:4.48'
    compile group: 'log4j', name: 'log4j', version:'1.2.17'
    androidTestCompile group: 'junit', name: 'junit', version: '4.12'
    //compile group: 'org.slf4j', name: 'slf4j-simple', version:'1.7.7'
    compile 'com.github.shell-software:fab:1.0.5'
//    compile 'com.google.zxing:core:3.2.0'
    compile project(':api')
    compile project(':qrlibrary')
    compile project(':linker')
}

////////
//libGDX
////////
// needed to add JNI shared libraries to APK when compiling on CLI
tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
    pkgTask.jniFolders = new HashSet<File>()
    pkgTask.jniFolders.add(new File(projectDir, 'libs'))
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}
